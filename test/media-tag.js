/* global document, describe, it */
import chai from 'chai';
import mediaTag from '../src/presets/media-tag';
import identifier from '../src/enums/identifier';
import enrichedMediaTag from './helpers/enrich-media-tag-plugins';

describe('Create different media tag contents: ', () => {
	it('can create a media-tag containing an image', () => {
		// Create container for media tag
		const mediaTagContainer = document.createElement('media-tag');
		mediaTagContainer.setAttribute('src', 'image-without-extension');
		mediaTagContainer.setAttribute('data-type', 'image/png');
		mediaTagContainer.setAttribute('data-attr-width', '300px');
		mediaTagContainer.setAttribute('data-attr-height', '200px');

		// Create contents based on the attributes
		mediaTag(mediaTagContainer);

		// Create the expected element
		const expectedResult = document.createElement('img');
		expectedResult.setAttribute('src', 'image-without-extension');
		expectedResult.setAttribute('width', '300px');
		expectedResult.setAttribute('height', '200px');

		// Compare expected contents
		// Like this we avoid problems when browsers change the order
		// of the attributes
		chai.assert.isTrue(mediaTagContainer.firstChild.isEqualNode(expectedResult), 'media tag result element is like the expected element');
	});

	it('can create a media-tag containing an audio', () => {
		// Create container for media tag
		const mediaTagContainer = document.createElement('media-tag');
		mediaTagContainer.setAttribute('src', 'alterway.mp3');
		mediaTagContainer.setAttribute('data-type', 'audio/mp3');
		mediaTagContainer.setAttribute('data-attr-controls', 'controls');

		// Create contents based on the attributes
		mediaTag(mediaTagContainer);

		// Create the expected element
		const expectedResult = document.createElement('audio');
		expectedResult.setAttribute('src', 'alterway.mp3');
		expectedResult.setAttribute('controls', 'controls');

		// Compare expected contents
		// Like this we avoid problems when browsers change the order
		// of the attributes
		chai.assert.isTrue(mediaTagContainer.firstChild.isEqualNode(expectedResult), 'media tag result element is like the expected element');
	});

	it('can create a media-tag containing a video', () => {
		// Create container for media tag
		const mediaTagContainer = document.createElement('media-tag');
		mediaTagContainer.setAttribute('src', 'cube.mp4');
		mediaTagContainer.setAttribute('data-type', 'video/mp4');
		mediaTagContainer.setAttribute('data-attr-width', '300px');
		mediaTagContainer.setAttribute('data-attr-height', '200px');

		// Create contents based on the attributes
		mediaTag(mediaTagContainer);

		// Create the expected element
		const expectedResult = document.createElement('video');
		expectedResult.setAttribute('src', 'cube.mp4');
		expectedResult.setAttribute('width', '300px');
		expectedResult.setAttribute('height', '200px');

		// Compare expected contents
		// Like this we avoid problems when browsers change the order
		// of the attributes
		chai.assert.isTrue(mediaTagContainer.firstChild.isEqualNode(expectedResult), 'media tag result element is like the expected element');
	});
});

describe('Usage several plugins', () => {
	it('Instanciate some fake test plugins', () => {
		const templatedObject = [];
		enrichedMediaTag.fakeMediaTagElements.forEach(element => {
			templatedObject.push({
				identifier: Object.keys(identifier).filter(identifier => {
					return element.getAttribute(identifier);
				}),
				src: element.getAttribute('src'),
				'data-type': element.getAttribute('data-type')
			});
		});

		let result = true;
		templatedObject.forEach(object => {
			result = result && (object.identifier.length === 1);
			result = result && (object.src === 'nothing');
			result = result && (object['data-type'] === 'none');
		});

		chai.assert.isTrue(result === true, 'media tag plugins are well registered');
	});

	// TODO Check really if plugins are called instead assert true on no error
	it('Perform media-tag processing over autogenerated media-tag elements', () => {
		enrichedMediaTag.fakeMediaTagElements.forEach(element => {
			enrichedMediaTag(element);
			console.log({
				identifier: Object.keys(identifier).filter(identifier => {
					return element.getAttribute(identifier);
				}),
				src: element.getAttribute('src'),
				'data-type': element.getAttribute('data-type')
			});

			chai.assert.isTrue(true, 'media-tag plugins are well applied for each cases');
		});
	});

	// TODO Check really if plugins are called instead assert true on no error
	it('Perform media-tag processing over multi-filter matching autogenerated element', () => {
		const element = enrichedMediaTag.fakeMediaTagElements[0];

		element.setAttribute('test_2', true);
		element.setAttribute('test_3', true);
		element.setAttribute('test_4', true);

		enrichedMediaTag(element);

		chai.assert.isTrue(true, 'media-tag filters are well applied');
	});
});
